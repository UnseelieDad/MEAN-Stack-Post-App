const express = require("express");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const router = express.Router();
// Import the user model
const User = require("../models/user");

// Route for signup
router.post("/signup", (req, res, next) => {
  // Use bcrypt to hash the incoming password
  bcrypt.hash(req.body.password, 10).then((hash) => {
    const user = new User({
      email: req.body.email,
      password: hash, // store password hash instead of password
    });
    user
      .save()
      .then((result) => {
        res.status(201).json({
          message: "User created!",
          result: result,
        });
      })
      .catch((err) => {
        res.status(500).json({
          error: err,
        });
      });
  });
});

router.post('/login', (req, res, next) => {
  let fetchedUser;
  // Search for a user with the entered email in the database
  User.findOne({ email: req.body.email })
    .then(user => {
      if (!user) {
        // Authentication failed
        return res.status(401).json({
          message: 'Auth failed, user not in database.'
        });
      }
      fetchedUser = user;
      // Compare the hash generated by the incomming password to the one stored in the database
      return bcrypt.compare(req.body.password, user.password)
        .then(result => {
          if (!result) {
            // Invalid match
            return res.status(401).json({
              message: 'Auth failed, password incorrect.',
            });
          }
          // Matched password in database
          // Keep track of user with a json web token
          const token = jwt.sign(
            { emai: fetchedUser.email, userId: fetchedUser._id },
            'secret_though_I_walk_through_the_valley_of_the_shadow_of_death_I_will_fear_no_evil',
            { expiresIn: '1h'}
          );
          // Send token up to the frontend
          res.status(200).json({
            message: 'User logged in!',
            token: token,
            expiresIn: 3600,
            userId: fetchedUser._id
          });
        })
        .catch(err => {
          // Authentication failed
          return res.status(401).json({
            message: 'Auth failed, error.',
            error: err
          });
        });
    });
});

module.exports = router;
